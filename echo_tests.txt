üîπ Pruebas caseras:

echo $USER "$USER" '$USER'

	echo "$USER" "$-HOLA" "$1ERROR" "$ ERROR" $ERROR
droura-s 569XZimsHOLA ERROR $ ERROR
	echo "$USER" "$-HOLA"
droura-s 569XZimsHOLA
	echo "$USER" "$-"
droura-s 569XZims en el de prueba sale droura-s $-

echo " '$USER' "
echo "$USER" "$-HOLA" "$1ERROR" "$ ERROR" $ERROR
echo hola "$USER $?" adios

echo hola ""    "" hola

echo hola ""    ccalcio""hola
bash: hola  ccalciohola
mini: hola  ccalcio  hola

echo "Hello world"
bash: Hello world



üîπ Pruebas con comillas

echo "Hello world"
‚úÖ Debe imprimir: Hello world

echo 'Hello world'
‚úÖ Debe imprimir: Hello world

echo "Hello 'world'"
‚úÖ Debe imprimir: Hello 'world'

echo 'Hello "world"'
‚úÖ Debe imprimir: Hello "world"

echo "Hello (comilla sin cerrar)
‚ùå Debe dar error de sintaxis: Syntax error: unclosed quotes

echo 'Hello (comilla sin cerrar)
‚ùå Debe dar error de sintaxis: Syntax error: unclosed quotes



üîπ Pruebas con espacios y caracteres especiales

echo " Hello world "
‚úÖ Debe imprimir: Hello world (respetando los espacios dentro de comillas).

echo Hello   world
‚úÖ Debe imprimir: Hello world (colapsando espacios m√∫ltiples en uno).

echo "*"
‚úÖ Debe imprimir: * (sin expandir como wildcard, a menos que lo haga bash).

echo "$USER"
‚úÖ Debe imprimir: el valor de $USER si soportas variables de entorno.

echo '$USER'
‚úÖ Debe imprimir: $USER (sin expandir la variable porque est√° entre comillas simples).

echo "hola $USER" "hola $?" '$?'


üîπ Pruebas con -n

echo -n Hello
‚úÖ Debe imprimir: Hello (sin salto de l√≠nea).

echo -nnnnnn Hello
‚úÖ Debe imprimir: Hello (opciones -n consecutivas deben ser ignoradas como en bash).



Echo error
echo "hola $?" '$?'
==6769== Invalid read of size 1
==6769==    at 0x10ABA2: expand_tokens (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x10A4D7: tokenize_input (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x109638: minishell_loop (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x109714: main (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==  Address 0x4b571a8 is 1 bytes after a block of size 7 alloc'd
==6769==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==6769==    by 0x10DFDC: ft_calloc (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x10AD80: forge_value (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x10AF41: expand_variable (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x10AA5C: expand_loop (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x10AB82: expand_tokens (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x10A4D7: tokenize_input (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x109638: minishell_loop (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769==    by 0x109714: main (in /mnt/c/Users/danie/minichell/minishell/minishell)
==6769== 
Syntax error: unclosed quotes in '"hola '



Printing tokens:
0: echo
1: -nnnnn

        --Hello

Printing tokens:
0: echo
1: -nnnnn
2: Hello

        --

Printing tokens:
0: echo
1: -nnnnn
2: Hello
3: 


Printing tokens:
0: echo
1: -nnnnn
2: Hello
3: 

* Fallo extra√±o que pasa cuando cambias el n√∫mero de "n" en echo -n a 4 (solo a veces)

static int	build_and_add(char *ptr, size_t start, size_t len, t_token **tokens)
{
	char	*new_word;

	new_word = ft_substr(ptr, start, len);
	if (!new_word)
	{
		printf("FREEEEEEEING\n\n");
		free_tokens(*tokens);
		*tokens = NULL;
		return (0);
	}
	if (!ft_strlen(new_word)) // Fixing the heisenbug of ghost tokens in echo -n
		free(new_word);
	else
		add_token(tokens, new_word);
	return (1);
}